# 资源包生成
generation:
  # 描述
  description: 萌芽
  # 资源包的版本号
  # https://minecraft.wiki/w/Pack_format#List_of_resource_pack_formats
  format: 34
  # 最低兼容的资源包版本
  min: 34
  # 最高兼容的资源包版本
  max: 34

# 资源包分发
# 当玩家进入服务器时自动向玩家分发资源包.
# 如果你已经有其他系统提供资源包的分发功能, 请关闭此功能以避免冲突.
service:
  # 使用什么实现?
  #
  # 类型: none
  #   不进行分发资源包的操作.
  # 类型: self_host
  #   将启动一个内置的 HTTP 服务器, 用于分发资源包给玩家.
  # 类型: only_url
  #   仅向玩家发送资源包的下载地址, 但不提供下载资源包的功能.
  type: self_host

  # 玩家是否必须接受资源包?
  required: false
  # 发送资源包时所附带的信息.
  prompt: "萌芽资源包"

  #####
  # 当 type 为 none 时: 没有额外的配置项.
  #####

  #####
  # 当 type 为 self_host 时:
  #
  # 必须设置为玩家连接服务器时所使用的地址.
  host: "localhost"
  # HTTP 服务器监听的端口 (注意避免冲突).
  port: 7270
  #####

  #####
  # 当 type 为 only_url 时:
  #
  # 发送给玩家的资源包下载地址.
  download_url: "http://resourcepack:12345/pack.zip"
  #####

# 资源包发布
# 与资源包分发不同, 这个功能是将资源包上传到指定的远端储存.
# 例如, 你可以将资源包上传到 GitHub 仓库, 以此来托管资源包.
publisher:
  # 使用什么实现?
  # 可用的类型: none, github
  type: github

  #####
  # 当 type 为 none 时: 没有额外的配置项.
  #####

  #####
  # 当 type 为 github 时:
  #
  # Github 的用户名
  username: "g2213swo"
  # Github 的令牌
  token: ""
  # Github 的仓库路径
  repo: "Nyaadanbou/rprelay"
  # 仓库的分支
  branch: "main"
  # 仓库的资源包存储路径
  path: "pack"
  # 提交信息
  commit_message: "Auto upload resource pack"
  ####
